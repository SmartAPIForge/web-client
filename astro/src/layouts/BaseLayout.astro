---
import { languageTag } from "@/paraglide/runtime";
import * as m from "@/paraglide/messages.js";

export interface BaseLayoutProps {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang={languageTag()}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={m.metaDescription()} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/icons/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title || m.metaTitle()}</title>
  </head>
  <body>
    <slot />
    <script>
      import { initAuth } from "../entities/User";
      document.addEventListener("DOMContentLoaded", () => {
        initAuth();
      });
    </script>
  </body>
</html>

<style is:global>
  @font-face {
    font-family: "HSE-sans";
    src: url("/fonts/hse/sans/HSESans-Black.woff2") format("woff2");
    font-weight: 900;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-sans";
    src: url("/fonts/hse/sans/HSESans-Bold.woff2") format("woff2");
    font-weight: 700;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-sans";
    src: url("/fonts/hse/sans/HSESans-SemiBold.woff2") format("woff2");
    font-weight: 500;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-sans";
    src: url("/fonts/hse/sans/HSESans-Regular.woff2") format("woff2");
    font-weight: 300;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-sans";
    src: url("/fonts/hse/sans/HSESans-Italic.woff2") format("woff2");
    font-weight: 300;
    font-style: italic;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-sans";
    src: url("/fonts/hse/sans/HSESans-Thin.woff2") format("woff2");
    font-weight: 100;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-slab";
    src: url("/fonts/hse/slab/HSESlab-Black.woff2") format("woff2");
    font-weight: 900;
    font-style: normal;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-slab";
    src: url("/fonts/hse/slab/HSESlab-Italic.woff2") format("woff2");
    font-weight: 300;
    font-style: italic;
    font-display: swap;
  }

  @font-face {
    font-family: "HSE-slab";
    src: url("/fonts/hse/slab/HSESlab-Regular.woff2") format("woff2");
    font-weight: 300;
    font-style: normal;
    font-display: swap;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  :root {
  }

  html {
    font-family: "HSE-sans", system-ui, sans-serif;
    font-size: 24px;
  }

  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  a {
    text-decoration: none;
    color: inherit;
  }

  input[type="text"],
  input[type="email"],
  input[type="password"],
  input[type="number"],
  textarea {
    width: 100%;
    padding: 10px;
    box-sizing: border-box;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 0.8rem;
  }

  /* Focus state for input fields */
  input[type="text"]:focus,
  input[type="email"]:focus,
  input[type="password"]:focus,
  input[type="number"]:focus,
  textarea:focus {
    border-color: #66afe9;
    outline: none;
    box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
  }

  /* Placeholder styling */
  input[type="text"]::placeholder,
  input[type="email"]::placeholder,
  input[type="password"]::placeholder,
  input[type="number"]::placeholder,
  textarea::placeholder {
    color: #999;
    font-style: italic;
  }

  /* Disabled state for input fields */
  input[type="text"]:disabled,
  input[type="email"]:disabled,
  input[type="password"]:disabled,
  input[type="number"]:disabled,
  textarea:disabled {
    background-color: #f2f2f2;
    cursor: not-allowed;
  }

  /* Styling for textarea */
  textarea {
    resize: vertical; /* Allow vertical resizing only */
    min-height: 100px;
  }

  /* Styling for input fields with error */
  input[type="text"].error,
  input[type="email"].error,
  input[type="password"].error,
  input[type="number"].error,
  textarea.error {
    border-color: #e74c3c;
    background-color: #fce4e4;
  }

  /* Styling for input fields with success */
  input[type="text"].success,
  input[type="email"].success,
  input[type="password"].success,
  input[type="number"].success,
  textarea.success {
    border-color: #2ecc71;
    background-color: #e9f7ef;
  }

  hr {
    border-color: black;
    margin: 0 0;
  }

  .error {
    color: red;
  }
</style>
